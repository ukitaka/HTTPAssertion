name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'

jobs:
  validate:
    name: Validate Release
    runs-on: macos-14
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
    
    - name: Validate tag format
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        if [[ ! $TAG_NAME =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$ ]]; then
          echo "❌ Invalid tag format: $TAG_NAME"
          echo "Expected format: 1.0.0 or 1.0.0-beta.1"
          exit 1
        fi
        echo "✅ Valid tag format: $TAG_NAME"
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build and test
      run: |
        swift build -v
        swift test -v
    
    - name: Build Example Project
      run: |
        cd Example/Demo
        xcodebuild build -project Demo.xcodeproj -scheme Demo -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0'
    
    - name: Run UI Tests
      run: |
        cd Example/Demo
        xcodebuild test -project Demo.xcodeproj -scheme Demo -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' -only-testing:DemoUITests

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get tag information
      id: tag_info
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=$TAG_NAME
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a pre-release
        if [[ $TAG_NAME =~ -[a-zA-Z] ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Extract changelog for this version
      id: changelog
      run: |
        TAG_NAME=${{ steps.tag_info.outputs.tag_name }}
        VERSION=${{ steps.tag_info.outputs.version }}
        
        # Extract changelog content between version headers
        if grep -q "## \[$VERSION\]" CHANGELOG.md; then
          # Extract content between this version and the next version header
          CHANGELOG_CONTENT=$(awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
          
          # Remove leading/trailing whitespace and empty lines
          CHANGELOG_CONTENT=$(echo "$CHANGELOG_CONTENT" | sed '/^$/d' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
          
          if [ -n "$CHANGELOG_CONTENT" ]; then
            echo "changelog_found=true" >> $GITHUB_OUTPUT
            # Save changelog content to file to preserve formatting
            echo "$CHANGELOG_CONTENT" > changelog_content.md
          else
            echo "changelog_found=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "changelog_found=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate release notes
      id: release_notes
      run: |
        TAG_NAME=${{ steps.tag_info.outputs.tag_name }}
        VERSION=${{ steps.tag_info.outputs.version }}
        
        if [ "${{ steps.changelog.outputs.changelog_found }}" = "true" ]; then
          # Use changelog content
          RELEASE_NOTES=$(cat changelog_content.md)
        else
          # Generate basic release notes
          RELEASE_NOTES="## What's Changed
        
        Release $TAG_NAME
        
        See the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
        
        ## Installation
        
        Add HTTPAssertion to your project using Swift Package Manager:
        
        \`\`\`swift
        dependencies: [
            .package(url: \"https://github.com/${{ github.repository }}.git\", from: \"$VERSION\")
        ]
        \`\`\`"
        fi
        
        # Save release notes to file
        echo "$RELEASE_NOTES" > release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_info.outputs.tag_name }}
        name: Release ${{ steps.tag_info.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ steps.tag_info.outputs.is_prerelease }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update Package.swift version comment (for major releases)
      if: steps.tag_info.outputs.is_prerelease == 'false'
      run: |
        echo "✅ Release ${{ steps.tag_info.outputs.tag_name }} created successfully!"
        echo "📦 Swift Package Manager URL: https://github.com/${{ github.repository }}.git"
        echo "📋 Installation version: ${{ steps.tag_info.outputs.version }}"