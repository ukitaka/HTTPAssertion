name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  swift-package-tests:
    name: Swift Package Tests
    runs-on: macos-15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
    
    - name: Cache Swift dependencies
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-swift-
    
    - name: Swift version
      run: swift --version
    
    - name: Run Swift Package Tests
      run: swift test --verbose
      timeout-minutes: 10

  demo-ui-tests:
    name: Demo App UI Tests
    runs-on: macos-15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
    
    - name: Cache Xcode dependencies
      uses: actions/cache@v4
      with:
        path: |
          Example/Demo/.build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-xcode-demo-${{ hashFiles('Example/Demo/Demo.xcodeproj/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-demo-
    
    - name: List available simulators
      run: xcrun simctl list devices available
    
    - name: Boot iOS Simulator
      run: |
        SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 16" | head -1 | grep -o '[A-Z0-9-]\{36\}')
        echo "Booting simulator: $SIMULATOR_ID"
        xcrun simctl boot $SIMULATOR_ID
        echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
        
        # Disable hardware keyboard to prevent typing issues in UI tests
        defaults write com.apple.iphonesimulator ConnectHardwareKeyboard -bool NO
    
    - name: Wait for simulator to boot
      run: |
        MAX_WAIT=60
        COUNTER=0
        while ! xcrun simctl list devices | grep "$SIMULATOR_ID" | grep -q "Booted"; do
          if [ $COUNTER -ge $MAX_WAIT ]; then
            echo "Timeout waiting for simulator to boot"
            exit 1
          fi
          sleep 1
          COUNTER=$((COUNTER + 1))
        done
        echo "Simulator booted successfully"
    
    - name: Build Demo App for Testing
      run: |
        cd Example/Demo
        xcodebuild build-for-testing \
          -scheme Demo \
          -destination "platform=iOS Simulator,id=$SIMULATOR_ID" \
          -derivedDataPath DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO
      timeout-minutes: 15
    
    - name: Run Demo UI Tests
      run: |
        cd Example/Demo
        xcodebuild test-without-building \
          -scheme Demo \
          -destination "platform=iOS Simulator,id=$SIMULATOR_ID" \
          -derivedDataPath DerivedData \
          -only-testing:DemoUITests \
          -resultBundlePath TestResults.xcresult \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO
      timeout-minutes: 20
      continue-on-error: true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: demo-ui-test-results
        path: Example/Demo/TestResults.xcresult
        retention-days: 7
    
    - name: Check test results
      run: |
        cd Example/Demo
        if [ -d "TestResults.xcresult" ]; then
          echo "Test results found"
          # Extract basic test information
          xcrun xcresulttool get --format json --path TestResults.xcresult > test_summary.json
          cat test_summary.json
        else
          echo "No test results found"
          exit 1
        fi

  # Build-only job (fallback when UI tests fail)
  demo-build-only:
    name: Demo App Build Check
    runs-on: macos-15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
    
    - name: List available simulators
      run: xcrun simctl list devices available
    
    - name: Build Demo App
      run: |
        cd Example/Demo
        SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 16" | head -1 | grep -o '[A-Z0-9-]\{36\}')
        echo "Building for simulator: $SIMULATOR_ID"
        
        xcodebuild build \
          -scheme Demo \
          -destination "platform=iOS Simulator,id=$SIMULATOR_ID" \
          -derivedDataPath DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO
      timeout-minutes: 15

  # Health check (dependency validation, etc.)
  health-check:
    name: Health Check
    runs-on: macos-15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
    
    - name: Validate Package.swift
      run: swift package describe --type json > package_info.json && cat package_info.json
    
    - name: Check for Swift warnings
      run: swift build 2>&1 | tee build_output.txt
    
    - name: Upload build output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: build_output.txt
        retention-days: 3